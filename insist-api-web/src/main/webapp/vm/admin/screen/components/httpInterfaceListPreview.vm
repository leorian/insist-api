#*HTTP接口列表预览*#
<script id="httpInterfaceTemplate" type="text/x-handlebars-template">
    {{# if this}}
    {{#each this}}
    <tr>
        <td class="text-center" style="color: #00aaee">{{@index}}</td>
        <td class='text-center' title="{{name}}" style="text-align:left; white-space:nowrap; overflow:hidden; text-overflow:ellipsis;">{{name}}</td>
        <td class='text-center'>{{protocol}}</td>
        <td class='text-center' title="{{method}}" style="white-space:nowrap; overflow:hidden; text-overflow:ellipsis;">{{method}}</td>
        <td class='text-center' title="{{address}}" style="text-align:left; white-space:nowrap; overflow:hidden; text-overflow:ellipsis;">{{address}}</td>
        <td class='text-center'>
            <span class="glyphicon glyphicon-edit btn-success-glyphicon" title="编辑" data-interfaceid='{{id}}'
                  data-toggle='modal' style="color: #00aaee"
                  data-target='#myHttpModal'></span>
            &nbsp;&nbsp;
            <span class="glyphicon glyphicon-trash btn-danger-glyphicon" title="删除" data-interfaceid='{{id}}'
                  data-toggle='modal' style="color: #00aaee"
                  data-target='#deleteInterfaceModal'></span>
            &nbsp;&nbsp;
            <span class="glyphicon glyphicon-copy btn-copy-glyphicon" title="复制" data-interfaceid='{{id}}'
                  data-toggle='modal' style="color: #00aaee"
                  data-target='#httpCopyModal'></span>
            &nbsp;&nbsp;
            <span class="glyphicon glyphicon-fire btn-warning-glyphicon" title="预览" data-interfaceid='{{id}}'
                  data-toggle='modal' style="color: #00aaee"
                  data-target='#myHttpPreviewModal'></span>
        </td>
    </tr>
    {{/each}}
    {{else}}
    <tr>
        <td colspan='6' class='text-center'>暂无信息！</td>
    </tr>
    {{/if}}
</script>

<!-- HTTP接口复制模态框（Modal） -->
<div class="modal fade" id="httpCopyModal" tabindex="-1" role="dialog" aria-labelledby="httpCopyModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <button type="button" class="close" data-dismiss="modal" aria-hidden="true">
                    &times;
                </button>
                <h4 class="modal-title" id="httpCopyModalLabel">
                    HTTP接口文档复制对话框
                </h4>
            </div>
            <div class="modal-body">
                    <form id="newCopyInterfaceHttpForm" role="form">
                        <input type="hidden" name="copyAppIdInput" id="copyAppIdInput" value="$!{appDO.appId}" />
                        <input type="hidden" name="copyInterfaceIdInput" id="copyInterfaceIdInput" value=""/>
                        <div class="form-group">
                            <label class="control-label" for="copyInterfaceNameInput">接口名称：</label>
                            <input type="text" name="copyInterfaceNameInput" id="copyInterfaceNameInput" class="form-control" value="" />
                        </div>
                        <div class="form-group">
                            <label class="control-label" for="copyCategoryInput">接口类别：</label>
                            <select class="form-control" id="copyCategoryInput" name="copyCategoryInput">
                                <option value="">--选择分类--</option>
                                #foreach($interfaceCategoryEntity in $!interfaceCategoryEntities)
                                    <option value="$interfaceCategoryEntity.interfaceCategoryId">$interfaceCategoryEntity.interfaceCategoryName</option>
                                #end
                            </select>
                        </div>
                    </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-default" data-dismiss="modal">关闭
                </button>
                <button type="button" class="btn btn-primary">
                    提交更改
                </button>
            </div>
        </div><!-- /.modal-content -->
    </div><!-- /.modal -->
</div>

<script>
    $(function () {

        //HTTP接口列表展示
        $.post("${ctxPath}/rest/interfaceHttp/findInterfaceHttpList", {"appId": "$!{appDO.appId}"}, function (data) {
            window.localStorage.setItem("httpData", JSON.stringify(data));
            $("#httpTableTBody").handlebars($("#httpInterfaceTemplate"), data);
        }, "json");

        //HTTP接口编辑事件
        $("#httpTableTBody").delegate("span.btn-success-glyphicon", "click", function () {
            var interfaceId = $(this).attr("data-interfaceid");
            $("#myHttpModalLabel").html("编辑HTTP接口");
            $("#interfaceHttpIdInput").val(interfaceId);
            $("#myHttpModal").find("tbody").empty();
            $.post("${ctxPath}/rest/interfaceHttp/findInterfaceHttp", {"interfaceId": interfaceId}, function (data) {
                $("#myHttpModal").find("select[name='protocolInput']").val(data.protocol);
                $("#myHttpModal").find("input[name='methodInput']").val(data.method);
                var methodCheckboxElements = $("input[name='methodInputCheckBox']");
                for (var i = 0; i < methodCheckboxElements.length; i++) {
                    if (data.method.indexOf($(methodCheckboxElements[i]).val()) > -1) {
                        $(methodCheckboxElements[i]).prop("checked", true);
                    }
                }
                $("#myHttpModal").find("select[name='transformatInput']").val(data.transformat);
                $("#myHttpModal").find("select[name='categoryInput']").val(data.category);
                $("#myHttpModal").find("input[name='addressInput']").val(data.address);
                $("#myHttpModal").find("input[name='nameInput']").val(data.name);
                $("#myHttpModal").find("textarea[name='descriptionInput']").val(data.description);

                //请求头部
                $("#myHttpModal").find("#headerParamTable > tbody").handlebars($("#httpHeaderParamEditTemplate"), data);

                //请求参数
                $("#myHttpModal").find("#requestParamTable > tbody").handlebars($("#httpRequestParamEditTemplate"), data);

                //响应参数
                $("#myHttpModal").find("#responseParamTable > tbody").handlebars($("#httpResponseParamEditTemplate"), data);

                //结果示例
                if (data.interfaceResultEntities != null && data.interfaceResultEntities.length > 0) {
                    for (var i = 0; i < data.interfaceResultEntities.length; i++) {
                        if (data.interfaceResultEntities[i].exampleType == "NORMAL") {
                            $("#myHttpModal").find("textarea[name='returnExampleContent']").val(data.interfaceResultEntities[i].exampleContent);
                            $("#myHttpModal").find("textarea[name='returnExampleAttentionMatters']").val(data.interfaceResultEntities[i].attentionMatters);
                        } else {
                            $("#myHttpModal").find("textarea[name='exceptionExampleContent']").val(data.interfaceResultEntities[i].exampleContent);
                            $("#myHttpModal").find("textarea[name='exceptionAttentionMatters']").val(data.interfaceResultEntities[i].attentionMatters);
                        }
                    }
                }
            }, "json");
        });

        //HTTP接口删除事件
        $("#httpTableTBody").delegate("span.btn-danger-glyphicon", "click", function () {
            var interfaceId = $(this).attr("data-interfaceid");
            $("#deleteInterfaceModal").find("button.btn-primary").attr("data-interfaceid", interfaceId);
            $("#deleteInterfaceModal").find("button.btn-primary").attr("data-interfacetype", "HTTP");

        });

        //HTTP接口复制按钮
        $("#httpTableTBody").delegate("span.btn-copy-glyphicon", "click", function () {
            var interfaceId = $(this).attr("data-interfaceid");
            $.post("${ctxPath}/rest/interfaceHttp/findInterfaceHttp", {"interfaceId": interfaceId}, function (data) {
                $("#copyInterfaceIdInput").val(interfaceId);
                $("#copyInterfaceNameInput").val(data.name)
                $("#copyCategoryInput").val(data.category);
            }, "json");
        });

        //HTTP接口复制操作
        $("#httpCopyModal").delegate(".btn-primary","click",function () {
            $.post("${ctxPath}/rest/interfaceHttp/copyInterfaceHttp", $("#newCopyInterfaceHttpForm").serialize(), function (data) {
                console.log(data);
                if (data.success) {
                    $("#httpCopyModal").modal("hide");
//                    window.location.reload();
                    $("#interfaceCategoryUList").find("li.active").trigger("click");
                }
            }, "json");
        });

        //HTTP接口预览
        $("#httpTableTBody").delegate("span.btn-warning-glyphicon", "click", function () {
            var interfaceId = $(this).attr("data-interfaceid");
            $.post("${ctxPath}/rest/interfaceHttp/findInterfaceHttp", {"interfaceId": interfaceId}, function (data) {
                $("#myHttpPreviewModal").find(".modal-body").handlebars($("#myHttpPreviewModalTemplate"), data);
            }, "json");
        });


    });
</script>